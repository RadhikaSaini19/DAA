/*Q1) Given an unsorted array of integers, design an algorithm and implement it using a program to sort an array of elements by dividing the 
array into two subarrays and combining these subarrays after sorting each one of them. Your program should also find number of comparisons and 
inversions during sorting the array.Input Format: The first line contains number of test cases, T. For each test case, there will be two input lines. 
First line contains n (the size of array). Second line contains space-separated integers describing array.Output Format: The output will have T number 
of lines. For each test case T, there will be three output lines. First line will give the sorted array. Second line will give total number of comparisons.
Third line will give total number of inversions required.*/
#include <bits/stdc++.h>
using namespace std;
int c = 0;
void mergeArray(int arr[], int l, int mid, int h) {
    int n1 = mid - l + 1;
    int n2 = h - mid;
    int a[n1], b[n2];
    for(int i = 0; i < n1; i++) {
        a[i] = arr[l + i];
    }
    for(int i = 0; i < n2; i++) {
        b[i] = arr[mid + 1 + i];
    }
    int i = 0, j = 0, k = l;
    while(i < n1 && j < n2) {
        c++;
        if(a[i] <= b[j]) {
            arr[k] = a[i];
            i++;
        }
        else {
            arr[k] = b[j];
            j++;
        }
        k++;
    }
    while(i < n1) {
        arr[k] = a[i];
        i++; k++;
    }
    while(j < n2) {
        arr[k] = b[j];
        j++; k++;
    }
}
void mergeSort(int arr[], int l, int h) {
    if(l < h) {
        int mid = l + (h - l) / 2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, h);
        mergeArray(arr, l, mid, h);
    }
}
void display(int arr[], int n) {
    for(int i = 0; i < n; i++) {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

int main() {
    int t;
    cin>>t;
    while(t--) {
        int n;
        cin>>n;
        int *arr = new int[n];
        for(int i = 0; i < n; i++) {
            cin>>arr[i];
        }
        mergeSort(arr, 0, n - 1);
        display(arr, n);
        cout<<"comparisons = "<<c<<endl;
        delete []arr;
    }
}
/*Q2) Given an unsorted array of integers, design an algorithm and implement it using a program to sort an array of elements by partitioning the array 
into two subarrays based on a pivot element such that one of the sub array holds values smaller than the pivot element while another sub array holds values 
greater than the pivot element. Pivot element should be selected randomly from the array. Your program should also find number of comparisons and swaps required 
for sorting the array.Input Format: The first line contains number of test cases, T. For each test case, there will be two input lines. First line contains n (the 
size of array). Second line contains space-separated integers describing array.Output Format: The output will have T number of lines. For each test case T, there will
be three output lines. First line will give the sorted array. Second line will give total number of comparisons. Third line will give total number of swaps required.*/

#include <bits/stdc++.h>
using namespace std;
int c = 0, s = 0;
int partition(int arr[], int l, int h) {
    int x = (rand() % (l - h)) + l;
    if(h != x) {
        s++;
        swap(arr[x], arr[h]);
    }
    int pivot = arr[h];
    int i = l - 1;
    for(int j = l; j <= h - 1; j++) {
        if(arr[j] <= pivot) {
            i++;
            s++;
            swap(arr[i], arr[j]);
        }
    }
    s++;
    swap(arr[i + 1], arr[h]);
    return i + 1;
}

void quickSort(int arr[], int l, int h) {
    if(l < h) {
        int pivot = partition(arr, l, h);
        quickSort(arr, l, pivot - 1);
        quickSort(arr, pivot + 1, h);
    }
}

void display(int arr[], int n) {
    for(int i = 0; i < n; i++) {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

int main() {
    int t;
    cin>>t;
    while(t--) {
        int n;
        cin>>n;
        int *arr = new int[n];
        for(int i = 0; i < n; i++) {
            cin>>arr[i];
        }
        quickSort(arr, 0, n - 1);
        display(arr, n);
        cout<<"swaps = "<<s<<endl;
    }
}
/*Q3) Given an unsorted array of integers, design an algorithm and implement it using a program to find Kth smallest or largest element in the array. 
(Worst case Time Complexity = O(n))Input Format: The first line contains number of test cases, T. For each test case, there will be three input lines. 
First line contains n (the size of array). Second line contains space-separated integers describing array. Third line contains K.
Output Format: The output will have T number of lines. For each test case, output will be the Kth smallest or largest array element. If no Kth element is present,
output should be “not present”.*/

#include<bits/stdc++.h>
using namespace std;
int main() {
    int t;
    cin>>t;
    while(t--) {
        int n;
        cin>>n;
        int *arr = new int[n];
        for(int i = 0; i < n; i++) {
            cin>>arr[i];
        }
        int k;
        cin>>k;
        priority_queue<int> pq;
        for(int i = 0; i < k; i++) {
            pq.push(arr[i]);
        }
        for(int i = k; i < n; i++) {
            pq.push(arr[i]);
            if(pq.size() > k) pq.pop();
        }
        if(pq.empty()) cout<<"Not present"<<endl;
        else cout<<pq.top()<<endl;
        delete []arr;
    }
}


